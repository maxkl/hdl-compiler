
// Add two 1-bit-numbers
block adder_2x1bit {
    in a, b, carry_in;
    out sum, carry_out;

    sum = a ^ b ^ carry_in;
    carry_out = a & b | carry_in & (a ^ b);
}

// Add two 2-bit-numbers
block adder_2x2bit {
    in[2] a, b;
    in carry_in;
    out[2] sum;
    out carry_out;
    block adder_2x1bit adder_low, adder_high;

    adder_low.a = a[0];
    adder_low.b = b[0];
    adder_low.carry_in = carry_in;
    sum[0] = adder_low.sum;

    adder_high.a = a[1];
    adder_high.b = b[1];
    adder_high.carry_in = adder_low.carry_out;
    sum[1] = adder_high.sum;

    carry_out = adder_high.carry_out;
}

// Add two 4-bit-numbers
block adder_2x4bit {
    in[4] a, b;
    in carry_in;
    out[4] sum;
    out carry_out;
    block adder_2x2bit adder_low, adder_high;

    adder_low.a = a[2:0];
    adder_low.b = b[2:0];
    adder_low.carry_in = carry_in;
    sum[2:0] = adder_low.sum;

    adder_high.a = a[4:2];
    adder_high.b = b[4:2];
    adder_high.carry_in = adder_low.carry_out;
    sum[4:2] = adder_high.sum;

    carry_out = adder_high.carry_out;
}

// Add two 8-bit-numbers
block adder_2x8bit {
    in[8] a, b;
    in carry_in;
    out[8] sum;
    out carry_out;
    block adder_2x4bit adder_low, adder_high;

    adder_low.a = a[4:0];
    adder_low.b = b[4:0];
    adder_low.carry_in = carry_in;
    sum[4:0] = adder_low.sum;

    adder_high.a = a[8:4];
    adder_high.b = b[8:4];
    adder_high.carry_in = adder_low.carry_out;
    sum[8:4] = adder_high.sum;

    carry_out = adder_high.carry_out;
}

// Use an 8-bit-adder to add two bytes
block main {
	in[8] a, b;
    in carry_in;
    out[8] sum;
    out carry_out;
    block adder_2x8bit adder;

    adder.a = a;
    adder.b = b;
    adder.carry_in = carry_in;
    sum = adder.sum;
    carry_out = adder.carry_out;
}
